{"config":{"lang":["ru","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c","text":"KotlinJava <pre><code>fun hello() = println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Kotlin!\")\n</code></pre> <pre><code>public class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Java!\");\n    }\n}\n</code></pre>"},{"location":"en/","title":"You are welcome","text":"KotlinJava <pre><code>fun hello() = println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Kotlin!\")\n</code></pre> <pre><code>public class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Java!\");\n    }\n}\n</code></pre>"},{"location":"en/about/","title":"About","text":""},{"location":"en/hard/","title":"Hard","text":""},{"location":"en/soft/","title":"Soft","text":""},{"location":"en/code/codesmells/","title":"Code Smells","text":"<p>Code Smells are signs in the code that may indicate deeper problems in the system\u2019s design. They do not necessarily mean the code is wrong, but they suggest that it could be improved to be more maintainable, readable, and testable.</p>"},{"location":"en/code/codesmells/#common-code-smells","title":"Common Code Smells","text":""},{"location":"en/code/codesmells/#1-long-method-long-class","title":"1. Long Method / Long Class","text":"<ul> <li>Problem: A method or class is too long, often dozens or hundreds of lines.  </li> <li>Solution: Split into smaller methods, follow the Single Responsibility Principle (SRP).</li> </ul>"},{"location":"en/code/codesmells/#2-large-parameter-list","title":"2. Large Parameter List","text":"<ul> <li>Problem: A method or class has too many parameters, often a sign of doing too much.  </li> <li>Solution: Use DTOs, data classes, Builder pattern, or <code>@Immutable</code> wrappers.</li> </ul>"},{"location":"en/code/codesmells/#3-duplicate-code","title":"3. Duplicate Code","text":"<ul> <li>Problem: Repeated logic in different parts of the system.  </li> <li>Solution: Consolidate, extract to utilities, extensions, or abstractions.</li> </ul>"},{"location":"en/code/codesmells/#4-feature-envy","title":"4. Feature Envy","text":"<ul> <li>Problem: A method accesses fields of another class more than its own.  </li> <li>Solution: Consider moving the method to the class it envies.</li> </ul>"},{"location":"en/code/codesmells/#5-shotgun-surgery","title":"5. Shotgun Surgery","text":"<ul> <li>Problem: A small change requires edits in many places.  </li> <li>Solution: Centralize knowledge, improve encapsulation.</li> </ul>"},{"location":"en/code/codesmells/#6-god-object-god-class","title":"6. God Object / God Class","text":"<ul> <li>Problem: A class has too many responsibilities.  </li> <li>Solution: Split according to SRP.</li> </ul>"},{"location":"en/code/codesmells/#7-switch-statements-if-else-chains","title":"7. Switch Statements / if-else Chains","text":"<ul> <li>Problem: Violates the Open/Closed Principle.  </li> <li>Solution: Use polymorphism, sealed classes, or enums with behavior.</li> </ul>"},{"location":"en/code/codesmells/#8-boolean-flags","title":"8. Boolean Flags","text":"<ul> <li>Problem: Method behavior changes based on a boolean flag.  </li> <li>Solution: Create separate methods or use the Strategy Pattern.</li> </ul>"},{"location":"en/code/codesmells/#9-data-clumps","title":"9. Data Clumps","text":"<ul> <li>Problem: Same fields are often passed together (e.g., <code>name</code>, <code>age</code>, <code>country</code>).  </li> <li>Solution: Combine into a single class.</li> </ul>"},{"location":"en/code/codesmells/#10-primitive-obsession","title":"10. Primitive Obsession","text":"<ul> <li>Problem: Using primitive types (String, Int) instead of value objects.  </li> <li>Solution: Create domain-specific types (e.g., <code>Email</code>, <code>PhoneNumber</code>, <code>UserId</code>).</li> </ul>"},{"location":"en/code/codesmells/#11-inappropriate-intimacy","title":"11. Inappropriate Intimacy","text":"<ul> <li>Problem: Classes are too dependent on each other\u2019s internal details.  </li> <li>Solution: Reduce coupling using interfaces or abstraction layers.</li> </ul>"},{"location":"en/code/codesmells/#12-temporal-coupling","title":"12. Temporal Coupling","text":"<ul> <li>Problem: Methods must be called in a strict order.  </li> <li>Solution: Use Builder or enforce calling order via API.</li> </ul>"},{"location":"en/code/codesmells/#architectural-code-smells","title":"Architectural Code Smells","text":"<ul> <li>Violating SOLID principles (especially SRP and OCP).  </li> <li>Hidden or implicit dependencies (prefer explicit dependency injection).  </li> <li>Poor test coverage / difficult to test code.  </li> <li>Missing contracts or invariants.</li> </ul>"},{"location":"en/code/grasp/","title":"GRASP","text":"<p>GRASP (General Responsibility Assignment Software Patterns) is a set of principles that help assign responsibilities to classes and objects in object-oriented design.  </p> <p>These patterns answer the question: \"Who should be responsible for performing a particular task?\" </p> <p>GRASP helps build clean, scalable, and flexible architectures, especially in the early stages of design.</p>"},{"location":"en/code/grasp/#grasp-patterns","title":"GRASP Patterns","text":"# Pattern Name What It Does 1 Information Expert Assign responsibility to the class that has the needed information 2 Creator Defines who should create an object 3 Controller Delegates handling of user input 4 Low Coupling Minimizes dependencies between classes 5 High Cohesion Maximizes related functionality within a class 6 Polymorphism Delegates behavior via a common interface 7 Pure Fabrication Introduces a helper class to reduce coupling 8 Indirection Introduces a mediator to weaken dependencies 9 Protected Variations Protects parts of the system from changes by using stable interfaces"},{"location":"en/code/grasp/#examples-kotlin-style","title":"Examples (Kotlin-style)","text":""},{"location":"en/code/grasp/#1-information-expert","title":"1. Information Expert","text":"<p>The class with the necessary information is responsible.  </p> <pre><code>class Order(val items: List&lt;Item&gt;) {\n    fun getTotalPrice(): Double {\n        return items.sumOf { it.price }\n    }\n}\n</code></pre> <pre><code>Order is the expert of its total because it contains the list of items.\n</code></pre>"},{"location":"en/code/grasp/#2-creator","title":"2. Creator","text":"<p>Who should create the object? Someone who:</p> <ul> <li>Aggregates it</li> <li>Uses it</li> <li>Has the necessary data</li> </ul> <pre><code>class Order {\n    fun addItem(product: Product) {\n        val item = Item(product)\n        // Add to order\n    }\n}\n</code></pre> <pre><code>Order creates Item because it owns it.\n</code></pre>"},{"location":"en/code/grasp/#3-controller","title":"3. Controller","text":"<p>Assigns the object responsible for handling user input.</p> <pre><code>class OrderController {\n    fun onOrderButtonClicked() {\n        // calls OrderService or similar\n    }\n}\n</code></pre> <pre><code>OrderController manages the event, not the UI.\n</code></pre>"},{"location":"en/code/grasp/#4-low-coupling","title":"4. Low Coupling","text":"<p>Minimize dependencies between classes.</p> <pre><code>Instead of Order directly depending on Database, depend on an abstraction like OrderRepository.\n</code></pre>"},{"location":"en/code/grasp/#5-high-cohesion","title":"5. High Cohesion","text":"<p>Each class does one thing well. If a class handles too many responsibilities, cohesion decreases.</p>"},{"location":"en/code/grasp/#6-polymorphism","title":"6. Polymorphism","text":"<p>Shared behavior through an interface.</p> <pre><code>interface PaymentMethod {\n    fun pay(amount: Double)\n}\n\nclass CreditCard : PaymentMethod { ... }\nclass PayPal : PaymentMethod { ... }\n</code></pre>"},{"location":"en/code/grasp/#7-pure-fabrication","title":"7. Pure Fabrication","text":"<p>A class created not for the domain, but for architectural purposes.</p> <pre><code>class Logger {\n    fun log(message: String) { ... }\n}\n</code></pre> <pre><code>Logger is not part of the domain but helps reduce coupling.\n</code></pre>"},{"location":"en/code/grasp/#8-indirection","title":"8. Indirection","text":"<p>A mediator to reduce direct dependencies.</p> <pre><code>class PaymentService {\n    fun process(method: PaymentMethod, amount: Double) {\n        method.pay(amount)\n    }\n}\n</code></pre> <pre><code>Instead of calling CreditCard.pay() directly, we use a mediator.\n</code></pre>"},{"location":"en/code/grasp/#9-protected-variations","title":"9. Protected Variations","text":"<p>Changes in one part should not break others.</p> <pre><code>Example: an interface Storage with implementations DatabaseStorage and FileStorage.\n</code></pre>"},{"location":"en/code/grasp/#conclusion","title":"Conclusion","text":"<p>GRASP helps:</p> <ul> <li>Make code readable and maintainable</li> <li>Reduce coupling</li> <li>Increase reuse and modularity</li> </ul>"},{"location":"en/code/solid/","title":"S.O.L.I.D","text":"<p>SOLID is an acronym for five principles of object-oriented programming that make software more maintainable, scalable, and flexible.</p>"},{"location":"en/code/solid/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>A class should have only one reason to change, meaning it should have one responsibility.</p> <pre><code>// Bad example: One class handles everything\nclass UserService {\n    fun registerUser(name: String, email: String) {\n        println(\"Registering $name\")\n        println(\"Sending welcome email to $email\")\n        println(\"Logging registration in file\")\n    }\n}\n\n// Good example: Separate responsibilities\nclass UserRepository {\n    fun saveUser(name: String) {\n        println(\"User $name saved to database\")\n    }\n}\n\nclass EmailService {\n    fun sendWelcomeEmail(email: String) {\n        println(\"Welcome email sent to $email\")\n    }\n}\n\nclass Logger {\n    fun log(message: String) {\n        println(\"Log: $message\")\n    }\n}\n\nclass UserService(\n    private val repository: UserRepository,\n    private val emailService: EmailService,\n    private val logger: Logger\n) {\n    fun registerUser(name: String, email: String) {\n        repository.saveUser(name)\n        emailService.sendWelcomeEmail(email)\n        logger.log(\"User $name registered\")\n    }\n}\n</code></pre>"},{"location":"en/code/solid/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<p>Software entities should be open for extension but closed for modification.</p> <pre><code>// Bad example: Modifying class for each new type\nclass PriceCalculator {\n    fun calculatePrice(amount: Double, customerType: String): Double {\n        return when (customerType) {\n            \"VIP\" -&gt; amount * 0.8\n            \"Regular\" -&gt; amount * 0.9\n            else -&gt; amount\n        }\n    }\n}\n\n// Good example: Use inheritance or strategy pattern\ninterface DiscountStrategy {\n    fun apply(amount: Double): Double\n}\n\nclass VIPDiscount : DiscountStrategy {\n    override fun apply(amount: Double) = amount * 0.8\n}\n\nclass RegularDiscount : DiscountStrategy {\n    override fun apply(amount: Double) = amount * 0.9\n}\n\nclass PriceCalculator(private val discountStrategy: DiscountStrategy) {\n    fun calculatePrice(amount: Double): Double {\n        return discountStrategy.apply(amount)\n    }\n}\n</code></pre>"},{"location":"en/code/solid/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Subtypes must be substitutable for their base types without altering program correctness.</p> <pre><code>// Bad example: Not all payment methods support refunds\nopen class Payment {\n    open fun pay(amount: Double) {\n        println(\"Paid $amount\")\n    }\n\n    open fun refund(amount: Double) {\n        println(\"Refunded $amount\")\n    }\n}\n\nclass CreditCardPayment : Payment() \n\nclass BitcoinPayment : Payment() {\n    override fun refund(amount: Double) {\n        throw Exception(\"Bitcoin refunds not supported!\") // \u274c Violates LSP\n    }\n}\n\n// Good example: Separate interface for refundable payments\ninterface PaymentMethod {\n    fun pay(amount: Double)\n}\n\ninterface Refundable {\n    fun refund(amount: Double)\n}\n\nclass CreditCardPayment : PaymentMethod, Refundable {\n    override fun pay(amount: Double) = println(\"Paid $amount via credit card\")\n    override fun refund(amount: Double) = println(\"Refunded $amount via credit card\")\n}\n\nclass BitcoinPayment : PaymentMethod {\n    override fun pay(amount: Double) = println(\"Paid $amount via Bitcoin\")\n}\n</code></pre>"},{"location":"en/code/solid/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Clients should not depend on interfaces they do not use.</p> <pre><code>// Bad example: One interface for all devices\ninterface Machine {\n    fun print(document: String)\n    fun scan(document: String)\n    fun fax(document: String)\n}\n\nclass OldPrinter : Machine {\n    override fun print(document: String) { println(\"Printing $document\") }\n    override fun scan(document: String) { throw Exception(\"Cannot scan\") } // \u274c Violates ISP\n    override fun fax(document: String) { throw Exception(\"Cannot fax\") }\n}\n\n// Good example: Split interfaces\ninterface Printer {\n    fun print(document: String)\n}\n\ninterface Scanner {\n    fun scan(document: String)\n}\n\ninterface Fax {\n    fun fax(document: String)\n}\n\nclass MultiFunctionPrinter : Printer, Scanner, Fax {\n    override fun print(document: String) { println(\"Printing $document\") }\n    override fun scan(document: String) { println(\"Scanning $document\") }\n    override fun fax(document: String) { println(\"Faxing $document\") }\n}\n\nclass SimplePrinter : Printer {\n    override fun print(document: String) { println(\"Printing $document\") }\n}\n</code></pre>"},{"location":"en/code/solid/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p> <pre><code>// Bad example: Direct dependency on MySQL\nclass MySQLDatabase {\n    fun query(sql: String) { println(\"Querying MySQL: $sql\") }\n}\n\nclass UserService {\n    private val db = MySQLDatabase() \n    fun getUser(id: Int) = db.query(\"SELECT * FROM users WHERE id=$id\")\n}\n\n// Good example: Use abstraction\ninterface Database {\n    fun query(sql: String)\n}\n\nclass MySQLDatabase : Database {\n    override fun query(sql: String) { println(\"Querying MySQL: $sql\") }\n}\n\nclass PostgresDatabase : Database {\n    override fun query(sql: String) { println(\"Querying PostgreSQL: $sql\") }\n}\n\nclass UserService(private val database: Database) {\n    fun getUser(id: Int) = database.query(\"SELECT * FROM users WHERE id=$id\")\n}\n</code></pre>"},{"location":"en/code/testdoubles/","title":"Test doubles","text":"<p>Test Double is a generic term that describes objects that behave or look like the real objects our code depends on. Faking a server-layer response might be an excellent example of that. It is almost impossible to avoid the use of test doubles, especially in unit testing.</p>"},{"location":"en/code/testdoubles/#stub","title":"Stub","text":"<p>A Stub provides hardcoded values for method calls. It always returns the same output regardless of input. It is useful when we don\u2019t care about the logic, just about isolating the code under test.</p> <pre><code>var mock = new Mock&lt;IRepository&gt;();\nmock.Setup(x =&gt; x.IsValid(It.IsAny&lt;int&gt;())).Returns(true);\n</code></pre> <p>Use stubs when:</p> <ul> <li> <p>You need predictable, fixed responses.</p> </li> <li> <p>You don\u2019t care about verifying interactions.</p> </li> </ul> <p>Example: Replacing a database call with a predefined return value.</p>"},{"location":"en/code/testdoubles/#spy","title":"Spy","text":"<p>A Spy records information about how it was used:</p> <ul> <li> <p>What methods were called</p> </li> <li> <p>With what arguments</p> </li> <li> <p>How often</p> </li> </ul> <p>Example Spy implementation:</p> <pre><code>public class RepositorySpy : IRepository\n{\n    public bool IsValidWasCalled = false;\n\n    public bool IsValid(int id)\n    {\n        IsValidWasCalled = true;\n        return true;\n    }\n\n    public void Add(int id, bool valid) { }\n}\n</code></pre> <p>Usage in test:</p> <pre><code>var spy = new RepositorySpy();\nspy.IsValid(123);\n\nAssert.True(spy.IsValidWasCalled);\n</code></pre> <p>Use spies when:</p> <ul> <li> <p>You don\u2019t care about the return value.</p> </li> <li> <p>You only want to check that a method was called correctly (e.g., email sent once, logs written).</p> </li> </ul>"},{"location":"en/code/testdoubles/#mock","title":"Mock","text":"<p>A Mock is more powerful:</p> <ul> <li> <p>Like a stub, it can return different values depending on input.</p> </li> <li> <p>Like a spy, it can verify that methods were called.</p> </li> <li> <p>Assertions are typically written in the mock configuration, not the test itself.</p> </li> </ul> <pre><code>var mock = new Mock&lt;IRepository&gt;();\n\nmock.Setup(x =&gt; x.IsValid(1)).Returns(true);\nmock.Setup(x =&gt; x.IsValid(2)).Returns(false);\n\n// Exercise code...\n\nmock.Verify(x =&gt; x.Add(1, true), Times.Once);\nmock.Verify(x =&gt; x.IsValid(It.IsAny&lt;int&gt;()), Times.Exactly(2));\n</code></pre> <p>Use mocks when:</p> <ul> <li> <p>You want to control return values dynamically.</p> </li> <li> <p>You need to verify both output and interaction.</p> </li> </ul>"},{"location":"en/code/testdoubles/#fake","title":"Fake","text":"<p>A Fake is a working, lightweight implementation of an interface. It behaves like the real implementation but is simplified and faster. Unlike stubs/mocks, it contains real logic.</p> <pre><code>public class FakeRepository : IRepository\n{\n    private Dictionary&lt;int, bool&gt; _values = new Dictionary&lt;int, bool&gt;();\n\n    public bool IsValid(int id)\n    {\n        return _values.ContainsKey(id) &amp;&amp; _values[id];\n    }\n\n    public void Add(int id, bool valid)\n    {\n        _values[id] = valid;\n    }\n}\n</code></pre> <p>Example: In production you use AWS S3, but in tests you use a Fake S3 that saves files to disk.</p> <p>Use fakes when:</p> <ul> <li> <p>A mock/stub is insufficient.</p> </li> <li> <p>You need lightweight but working behavior without external dependencies.</p> </li> </ul>"},{"location":"en/code/testdoubles/#comparison-table","title":"Comparison Table","text":"Type Returns Values? Verifies Calls? Real Logic? Typical Use Case Stub Yes (hardcoded) No No Replace data sources with fixed outputs Spy Yes (trivial) Yes (manual) No Verify side effects (emails, logging) Mock Yes (configurable) Yes (built-in) No Verify calls + provide scenario-based responses Fake Yes (realistic) Indirectly Yes (simplified) Replace heavy dependencies with lightweight code"},{"location":"en/code/testdoubles/#conclusion","title":"Conclusion","text":"<p>Stub \u2192 Fixed return values.</p> <p>Spy \u2192 Tracks method calls.</p> <p>Mock \u2192 Stubs + Spies in one, with built-in verification.</p> <p>Fake \u2192 Lightweight but functional alternative implementation.</p>"},{"location":"en/soft/conflict/","title":"Conflict management","text":"<p>Conflict management is the process of recognizing, preventing, and resolving conflicts between team members, departments, clients, or other stakeholders.</p>"},{"location":"en/soft/conflict/#what-is-a-conflict","title":"What is a Conflict?","text":"<p>A conflict is a situation where the interests, goals, values, or behaviors of two or more parties contradict each other.  </p> <p>Conflict is not always bad:  </p> <ul> <li>Destructive conflict \u2192 lowers motivation, damages relationships.  </li> <li>Constructive conflict \u2192 can lead to growth, innovation, and improved processes.  </li> </ul>"},{"location":"en/soft/conflict/#causes-of-conflicts","title":"Causes of Conflicts","text":"Cause Examples Roles and responsibilities \u201cThis is not my task\u201d, \u201cWho is responsible?\u201d Communication Misunderstanding, lack of feedback Personal differences Personality, work style, culture Limited resources Time, budget, personnel Goals and priorities \u201cNeed it fast\u201d vs \u201cNeed it high-quality\u201d Power and control Who makes the decisions"},{"location":"en/soft/conflict/#conflict-management-strategies-thomas-kilmann-model","title":"Conflict Management Strategies (Thomas-Kilmann Model)","text":"Strategy When to Use Meaning Avoiding When conflict is minor or not urgent Do not intervene Competing When result matters more than relationships Insist on your position Accommodating When relationships matter more than results Give in to the other party Compromising Both parties gain something Make mutual concessions Collaborating Best approach: aim for win-win Joint problem solving"},{"location":"en/soft/conflict/#stages-of-conflict-management","title":"Stages of Conflict Management","text":"<ol> <li> <p>Recognition    \u2014 Notice early signs: arguments, ignoring, reduced engagement.  </p> </li> <li> <p>Analysis    \u2014 Identify the cause, who is involved, and what\u2019s at stake.  </p> </li> <li> <p>Strategy Selection    \u2014 Choose an approach depending on the situation: avoid, discuss, intervene.  </p> </li> <li> <p>Intervention    \u2014 Conduct a dialogue, facilitation, mediation, 1-on-1, or team session.  </p> </li> <li> <p>Resolution    \u2014 Solidify results, agreements, and document if necessary.  </p> </li> <li> <p>Follow-up    \u2014 Check if the conflict resurfaces and provide feedback.  </p> </li> </ol>"},{"location":"en/soft/conflict/#methods-and-tools","title":"Methods and Tools","text":"<ul> <li>1:1 meetings \u2014 for softly uncovering the causes  </li> <li>Facilitation \u2014 neutral guidance of discussion  </li> <li>Retrospective \u2014 safe space for team problem discussion  </li> <li>Mediation \u2014 involving a third party  </li> <li>Active Listening \u2014 listen actively, paraphrase, clarify  </li> <li>Nonviolent Communication (NVC) \u2014 speak about feelings and needs, not accusations  </li> </ul>"},{"location":"en/soft/conflict/#example","title":"Example","text":"<p>Situation: Designer and developer argue \u2014 one wants \u201cbeautiful\u201d, the other \u201cworking and simple\u201d.  </p> <p>Solution: - Arrange a meeting where each explains their motivation - Use the \u201ccontext expansion\u201d technique: What is the feature goal? What\u2019s more important for the business? - Find a compromise (e.g., make it visually appealing but functional and adaptive) - Document the agreements  </p>"},{"location":"en/soft/conflict/#tips","title":"Tips","text":"<ul> <li>Conflict is not a mistake, but a growth opportunity if managed properly  </li> <li>Do not ignore or postpone conflicts  </li> <li>Focus on the problem, not the people  </li> <li>The earlier you intervene, the smoother the resolution</li> </ul>"},{"location":"en/soft/customervalues/","title":"Customer Value","text":"<p>Customer values are a customer's perceived worth of a product or service, considering the benefits received against the costs incurred in terms of time, effort, and money. Businesses focus on creating customer value to build loyalty, improve satisfaction, and drive profitability by consistently delivering high-quality products and exceptional service that meet customer needs.</p>"},{"location":"en/soft/customervalues/#key-aspects-of-customer-value-include","title":"Key aspects of customer value include:","text":"<ul> <li> <p>Functional: how well a product meets needs</p> </li> <li> <p>Monetary: value for money</p> </li> <li> <p>Social: connections after purchase</p> </li> <li> <p>Psychological: feelings from the purchase</p> </li> </ul>"},{"location":"en/soft/customervalues/#what-is-customer-value","title":"What is Customer Value?","text":"<p>It's a customer's subjective assessment of a product or service's worth.</p> <p>It's calculated as CV = Benefits - Costs, where costs include price, time, effort, and convenience.</p>"},{"location":"en/soft/customervalues/#four-types-of-customer-value","title":"Four Types of Customer Value","text":"<p>Functional Value: How well a product or service fulfills the customer's practical needs and solves a problem.</p> <p>Monetary Value: The perceived value for money, or the financial benefit a customer receives relative to the cost.</p> <p>Social Value: The sense of connection or belonging a customer experiences as a result of a purchase.</p> <p>Psychological Value: The emotional feelings and satisfaction a customer gets from a product or service.</p>"},{"location":"en/soft/customervalues/#why-customer-value-matters","title":"Why Customer Value Matters","text":"<p>Customer Loyalty: Satisfied customers who perceive high value are more likely to be repeat buyers.</p> <p>Increased Sales: Delivering value creates a sense of urgency and prompts quicker purchase decisions.</p> <p>Competitive Advantage: Businesses that effectively deliver customer value can increase their market share.</p> <p>Enhanced Profitability: Meeting customer needs effectively leads to better business performance and profitability.</p>"},{"location":"en/soft/customervalues/#examples-of-creating-customer-value","title":"Examples of Creating Customer Value","text":"<p>Personalized Support: Tailoring interactions to individual customer needs.</p> <p>Prioritizing Success: Focusing on helping customers achieve their goals with your product.</p> <p>Multi-channel Support: Offering assistance through various platforms.</p> <p>Quality and Service: Providing high-quality products and excellent customer service.</p> <p>Feedback Analysis: Using customer feedback to continuously improve offerings.</p>"},{"location":"en/soft/delegation/","title":"Delegation","text":"<p>Delegation is the transfer of responsibility for completing a task from one person/role/system to another. You don\u2019t do the task yourself \u2014 you entrust someone else to do it, while you remain accountable for the result.</p>"},{"location":"en/soft/delegation/#real-life-work-example","title":"Real-life / Work Example","text":"<p>Suppose you are a project manager, and you need to perform a risk analysis. You don\u2019t have the time or expertise \u2014 so you delegate this task to an analyst:</p> <ul> <li>You say: \u201cDo a risk analysis for this project and provide the results by Friday.\u201d  </li> <li>The analyst does the work.  </li> <li>You review the outcome and present it further.  </li> </ul>"},{"location":"en/soft/delegation/#structure-of-delegation","title":"Structure of Delegation","text":"Element Description Task What needs to be done Delegator Who delegates (assigns the task) Performer Who receives and executes the task Deadline/Result By what time and in what form the result is required Control &amp; Feedback Delegator still remains accountable for the result"},{"location":"en/soft/delegation/#what-to-delegate","title":"What to Delegate?","text":"<p>Better to delegate:</p> <ul> <li>Routine tasks  </li> <li>Tasks where another person is more competent  </li> <li>Work that can be done without your constant involvement  </li> </ul> <p>Avoid delegating:</p> <ul> <li>Critical decisions you are personally accountable for  </li> <li>Tasks requiring confidentiality or your personal involvement  </li> <li>Work that the person clearly cannot handle (due to skills or access)  </li> </ul>"},{"location":"en/soft/delegation/#example-in-an-it-team","title":"Example in an IT Team","text":"<p>You are a team lead. You have:  </p> <ul> <li>A bug that crashed production \u2192 needs investigation  </li> <li>But you delegate to a junior: \u201cCollect information about the bug, find the faulty commit, write a report.\u201d  </li> </ul> <p>You will review their work and make the final decision. But the actual job was done by someone else.  </p>"},{"location":"en/soft/delegation/#balance","title":"Balance","text":"<p>Delegation \u2260 dumping everything off your shoulders. It is a skill of management and leadership:</p> <ul> <li>You delegate not because you \u201cdon\u2019t want to,\u201d but because you optimize resources.  </li> <li>A good delegator gives a clear task, explains the context, trusts, but still verifies.  </li> </ul>"},{"location":"en/soft/delegation/#delegation-in-teams","title":"Delegation in Teams","text":"<p>Good delegation:</p> <ul> <li>Increases team engagement and motivation  </li> <li>Supports learning and growth  </li> <li>Removes bottlenecks  </li> </ul> <p>Bad delegation:</p> <ul> <li>Without context or explanation  </li> <li>Without trust, or with micromanagement  </li> <li>Without a clear request and deadlines  </li> </ul>"},{"location":"en/soft/dod/","title":"Definition of Done","text":"<p>Definition of Done \u2014 is a clear list of criteria that must be met for a task or feature to be considered fully completed and ready for production.  </p> <p>Examples of DoD:</p> <ul> <li>Code is written and has passed code review.  </li> <li>All unit/integration tests are written and passing.  </li> <li>Test coverage is at least 80%.  </li> <li>QA manual testing passed.  </li> <li>No known bugs with priority higher than P3.  </li> <li>Documentation updated (including Swagger, README, Wiki).  </li> <li>Committed to <code>main/master</code> and deployed to staging.  </li> <li>Production monitoring/logging is configured.  </li> <li>Accepted by PO or client.  </li> </ul> <p>Important: DoD is a shared agreement within the team. It should be consistent for all tasks of the same type (e.g., features or bug fixes).  </p>"},{"location":"en/soft/dor/","title":"Definition of Ready","text":"<p>Definition of Ready \u2014 is a list of criteria that determines whether a task is sufficiently prepared to be taken into development. It acts as an entry filter for the sprint or the \"In Progress\" column.  </p> <p>Examples of DoR:</p> <ul> <li>Task is clear: description, goals, acceptance criteria are provided.  </li> <li>Design/mockups are available (if required).  </li> <li>Proper tags, priority, and dependencies are set.  </li> <li>Roles and responsibilities are defined.  </li> <li>Acceptance Criteria (AC) are documented.  </li> <li>Estimated in story points or time.  </li> <li>No blockers: all required access, APIs, and infrastructure are ready.  </li> </ul> <p>DoR works as a \u201creadiness checklist\u201d: can we guarantee that a developer can start without asking 100 questions?</p>"},{"location":"en/soft/estimations/","title":"Estimation techniques","text":"<p>There are numerous estimation techniques used in software development to assess time and effort. They range from quick intuitive methods to strict numerical models. Here\u2019s an overview of the most popular ones.</p>"},{"location":"en/soft/estimations/#classification-of-estimation-techniques","title":"Classification of Estimation Techniques","text":"Type Example Methods Relative/Scaled Story Points, T-Shirt Sizes Time-based Hour/Day Estimation, Three-point Estimation (PERT) Comparative Planning Poker, Affinity Mapping Analytical Function Point Analysis, Use Case Estimation Historical Velocity, Throughput"},{"location":"en/soft/estimations/#top-estimation-techniques","title":"Top Estimation Techniques","text":"<ol> <li> <p>Story Points</p> <ul> <li> <p>Measures relative complexity of tasks.</p> </li> <li> <p>Uses Fibonacci numbers: 1, 2, 3, 5, 8, 13\u2026</p> </li> <li> <p>Not tied to hours.</p> </li> <li> <p>Commonly used in Scrum.</p> </li> </ul> <p>\u2705 Works well under high uncertainty.</p> <p>\u274c Requires experience and historical data for calibration.</p> </li> <li> <p>T-Shirt Sizes</p> <ul> <li> <p>Estimates tasks in categories: XS, S, M, L, XL.</p> </li> <li> <p>Quick, rough, and visual.</p> </li> </ul> <p>\u2705 Useful for prioritizing features.</p> <p>\u274c Lacks precision and hard to aggregate.</p> </li> <li> <p>Planning Poker</p> <ul> <li> <p>Team estimates tasks using cards (usually Fibonacci numbers).</p> </li> <li> <p>Everyone reveals estimates simultaneously.</p> </li> <li> <p>Discrepancies are discussed.</p> </li> </ul> <p>\u2705 Helps uncover hidden risks.</p> <p>\u274c Slow for large backlogs.</p> </li> <li> <p>Three-Point Estimation (PERT)</p> <ul> <li> <p>Measures three values:</p> </li> <li> <p>Optimistic (O) \u2014 best case</p> </li> <li> <p>Most likely (M) \u2014 most probable</p> </li> <li> <p>Pessimistic (P) \u2014 worst case</p> </li> <li> <p>Formula for expected estimation:</p> </li> <li> <p>Expected = (O + 4*M + P) / 6</p> </li> </ul> <p>\u2705 Provides a more realistic average estimate.</p> <p>\u274c More labor-intensive process.</p> </li> <li> <p>Function Point Analysis</p> <ul> <li> <p>Measures system size based on functionality (inputs, outputs, files, interfaces).</p> </li> <li> <p>Suitable for large business applications.</p> </li> </ul> <p>\u2705 Independent of programming language and platform.</p> <p>\u274c Complex, not suitable for small tasks.</p> </li> <li> <p>Use Case Estimation</p> <ul> <li> <p>Assigns weights to use cases (simple, average, complex).</p> </li> <li> <p>Total estimate is the sum of weighted use cases.</p> </li> </ul> <p>\u2705 Well-suited for product-oriented systems.</p> <p>\u274c Not ideal for technical or backend tasks.</p> </li> <li> <p>Bucket System</p> <ul> <li> <p>Tasks are sorted into predefined \"buckets\" (0.5, 1, 2, 3, 5, 8\u2026).</p> </li> <li> <p>Quick comparison without lengthy discussion.</p> </li> </ul> <p>\u2705 Scalable for large backlogs.</p> <p>\u274c Context may be lost with rough sorting.</p> </li> <li> <p>Dot Voting / Affinity Mapping</p> <ul> <li> <p>Team groups and ranks tasks by similarity.</p> </li> <li> <p>Quickly identifies high-value blocks.</p> </li> </ul> <p>\u2705 Great for early-stage feature planning.</p> <p>\u274c Subjective, requires facilitation.</p> </li> <li> <p>Velocity-Based Estimation</p> <ul> <li> <p>Uses real data from past sprints (velocity).</p> </li> <li> <p>Helps forecast deadlines and plan scope.</p> </li> </ul> <p>\u2705 Data-driven and factual.</p> <p>\u274c Requires a stable team and multiple iterations.</p> </li> <li> <p>No Estimation</p> <ul> <li>Some teams abandon estimation, working with fixed WIP and forecasting throughput.</li> </ul> <p>\u2705 Experimentally effective for mature teams.</p> <p>\u274c Hard for stakeholders to understand; requires discipline.</p> </li> </ol>"},{"location":"en/soft/estimations/#tips-for-effective-estimation","title":"Tips for Effective Estimation","text":"<ul> <li> <p>Combine multiple techniques when needed. Example: Story Points for backlog + Three-Point Estimation for critical tasks.</p> </li> <li> <p>Re-estimate periodically based on historical data.</p> </li> <li> <p>Document assumptions to avoid confusion.</p> </li> <li> <p>Train the team on the chosen method to improve accuracy.</p> </li> <li> <p>Include risk factors and buffer for uncertainty.</p> </li> </ul>"},{"location":"en/soft/nfr/","title":"Non-Functional Requirements","text":"<p>Non-functional requirements (NFRs) specify criteria that evaluate how a system performs a function, rather than the function itself.  </p> <ul> <li>Functional requirements \u2192 describe what the system does.  </li> <li>Non-functional requirements \u2192 define how the system behaves (characteristics such as performance, security, scalability).  </li> </ul> <p>A system may still technically work if NFRs aren\u2019t met, but it might fail to satisfy user expectations, business needs, or stakeholder goals.</p>"},{"location":"en/soft/nfr/#functional-vs-non-functional-requirements","title":"Functional vs Non-Functional Requirements","text":"Aspect Functional Requirement Non-Functional Requirement Focus What the system does How the system behaves Example \"User can reset password\" \"System must reset password within 3s\" Testable Functional testing Performance/Security testing"},{"location":"en/soft/nfr/#development-checklist-10-types-of-non-functional-requirements","title":"Development Checklist: 10 Types of Non-Functional Requirements","text":"<p>When defining NFRs, use this checklist to ensure coverage:</p> <ol> <li> <p>Security         - Questions: Does your product store/transmit sensitive info? Must it meet security standards?         - Solutions: Define encryption, threat resistance, authentication, and protocols.</p> </li> <li> <p>Capacity         - Questions: What are current/future storage and processing needs?         - Solutions: Define memory, disk, and compute requirements.</p> </li> <li> <p>Compatibility         - Questions: What hardware/OS versions are supported?         - Solutions: Specify hardware requirements and OS support.</p> </li> <li> <p>Reliability &amp; Availability         - Questions: What is acceptable downtime? Must it be 24/7?         - Solutions: Define uptime targets, failover, redundancy.</p> </li> <li> <p>Maintainability &amp; Manageability         - Questions: How easily can it be fixed or updated?         - Solutions: Define patching, monitoring, and admin tooling.</p> </li> <li> <p>Scalability         - Questions: How does it handle peak loads (e.g., Black Friday)?         - Solutions: Define growth limits and scaling rules.</p> </li> <li> <p>Usability         - Questions: Is it intuitive and accessible?         - Solutions: Define accessibility, UI/UX standards, learnability.</p> </li> <li> <p>Performance         - Questions: What are response time and throughput needs?         - Solutions: Define latency, speed, and resource usage.</p> </li> <li> <p>Compliance         - Questions: Must it follow legal/industry regulations?         - Solutions: Define HIPAA, GDPR, PCI DSS, etc.</p> </li> <li> <p>Environmental         - Questions: What physical conditions must it withstand?         - Solutions: Define temperature, humidity, vibration limits.</p> </li> </ol>"},{"location":"en/soft/nfr/#examples-of-non-functional-requirements","title":"Examples of Non-Functional Requirements","text":"Type Example Performance A stock trading app must execute trades in milliseconds. Reliability An airline booking system must be always accessible. Usability An educational app must have large buttons &amp; intuitive navigation. Security A mobile banking app must use end-to-end encryption. Maintainability A SaaS app must allow seamless updates without downtime. Scalability A streaming platform must handle millions of concurrent users. Compliance A healthcare app must comply with HIPAA regulations."},{"location":"en/soft/nfr/#best-practices-for-documenting-nfrs","title":"Best Practices for Documenting NFRs","text":"<ul> <li>Target system components (not always the entire product).  </li> <li>Make them measurable/testable \u2192 use metrics, thresholds, and units.  </li> <li>Be specific \u2192 avoid vague terms like \"fast\", use \"respond within 2s\".  </li> <li>Collaborate \u2192 involve stakeholders, users, and engineers.  </li> <li>Link with business objectives \u2192 balance cost vs. impact.  </li> <li>Account for 3rd party limits (e.g., API latency).  </li> <li>Consider architecture constraints (legacy systems, refactors).  </li> <li>Use existing standards (OS, platform, accessibility guidelines).  </li> <li>Review regularly \u2192 adjust for new tech, business changes.  </li> </ul>"},{"location":"en/soft/nfr/#summary","title":"Summary","text":"<ul> <li>Functional requirements = features.  </li> <li>Non-functional requirements = quality attributes.  </li> <li>Both are critical to delivering a successful, user-friendly, and scalable system.  </li> </ul>"},{"location":"en/soft/priority/","title":"Priority","text":"<p>Priority defines how important and urgent it is to complete a task, fix a bug, or implement a feature.  </p> <p>Prioritization helps to:  </p> <ul> <li>Focus on what matters most  </li> <li>Use resources effectively  </li> <li>Avoid decision paralysis (\u201ceverything is important!\u201d)  </li> </ul>"},{"location":"en/soft/priority/#examples-of-prioritization","title":"Examples of Prioritization","text":"Task Type Example Priority Blocking bug Users cannot log in Highest UI improvement Make animations smoother Medium New feature Add dark mode Low"},{"location":"en/soft/priority/#prioritization-techniques","title":"Prioritization Techniques","text":""},{"location":"en/soft/priority/#1-moscow","title":"1. MoSCoW","text":"<p>Divides tasks by importance:  </p> <ul> <li>Must \u2014 absolutely required (cannot release without it).  </li> <li>Should \u2014 important, but can be postponed.  </li> <li>Could \u2014 nice-to-have.  </li> <li>Won\u2019t \u2014 won\u2019t do in this sprint/release.  </li> </ul> <p>Benefits of the MOSCOW prioritization technique:</p> <ul> <li>Helps to manage customer\u2019s expectations</li> <li>Gives product teams focus on highest priority tasks</li> <li>Helps to prioritize the task list according to customer value, market research or key objectives of the business</li> <li>Forces quick decision-making (Read: Why quick decision making is important)</li> </ul> <p>Drawbacks:</p> <ul> <li>It\u2019s a pretty subjective prioritization technique</li> <li>It requires careful consideration and sometimes an iterative process to ensure that the task list is structured in a proper way</li> </ul>"},{"location":"en/soft/priority/#2-eisenhower-matrix","title":"2. Eisenhower Matrix","text":"Urgent Not Urgent Important Do now Plan Not Important Delegate Eliminate <p>Benefits of this prioritization technique:</p> <ul> <li>Enables effective time allocation</li> <li>Provides information about the tasks that should be delegated</li> <li>Helps to minimize time-wasters</li> </ul> <p>Drawbacks of this prioritization method:</p> <ul> <li>Listing tasks and assigning them into categories can be time-consuming</li> <li>Categorizing tasks based on importance is pretty subjective</li> </ul> <p>ABCDE method is similar this one but contains more categories for tasks:</p> <ul> <li>A (high importance and urgency)</li> <li>B (medium importance and urgency)</li> <li>C (low importance but high urgency)</li> <li>D (low importance and urgency)</li> <li>E (tasks to eliminate or delegate)</li> </ul>"},{"location":"en/soft/priority/#3-impact-vs-effort-or-value-vs-cost","title":"3. Impact vs Effort (or Value vs Cost)","text":"<p>Evaluates:  </p> <ul> <li>Impact \u2014 how much value it brings.  </li> <li>Effort \u2014 how much time/resources it takes.  </li> </ul> Low Effort High Effort High Impact Do it! Plan later Low Impact Maybe later Skip <p>Benefits:</p> <ul> <li>The matrix provides a clear visual representation of where each idea stands, making it easier to prioritize.</li> <li>Helps ensure that resources are allocated to ideas that offer the most value for the least effort.</li> <li>Encourages considering both the benefits and the costs of implementing ideas.</li> </ul> <p>Drawbacks:</p> <ul> <li>Personal opinions can heavily influence the ratings for value and complexity, potentially skewing results.</li> <li>Without specific calculations, the assessments may be imprecise and vary between team members.</li> </ul>"},{"location":"en/soft/priority/#4-rice-for-features","title":"4. RICE (for features)","text":"<p>Formula: <pre><code>RICE = (Reach \u00d7 Impact \u00d7 Confidence) / Effort\n</code></pre></p> <ul> <li>Reach \u2014 how many users are affected.  </li> <li>Impact \u2014 how significant the change is.  </li> <li>Confidence \u2014 how certain we are about the estimates.  </li> <li>Effort \u2014 how much work it takes.  </li> </ul> <p>Higher score = higher priority.  </p> <p>How it works To assess the priority level of your task, take the following steps:</p> <ol> <li> <p>Calculate Reach: Estimate how many people a task will affect within a specific time period.</p> </li> <li> <p>Calculate Impact: The point of calculating impact is to focus on tasks that will actually make a difference to your business. To rate the potential impact of a specific task, assign a score to it from 0.25 (minimal) to 3 (massive): 0.25 for minimal impact, 0.5 for low impact, 1 for medium impact, 2 for high impact, 3 for massive impact.</p> </li> <li> <p>Calculate Confidence: Assign a confidence score based on how much data supports your estimates, ranging from 50% (low) to 100% (high):</p> <ul> <li>100% Confidence (High): You have solid metrics and research backing up your estimates for Reach, Impact, and Effort.</li> <li>80% Confidence (Medium): You have data supporting two of the criteria, like Reach and Effort, but less certainty about Impact.</li> <li>50% Confidence (Low): You\u2019re unsure about any of the criteria. Reach and Impact might be overestimated, and Effort could be underestimated.</li> <li>Below 50%: Anything under 50% confidence is a total guess.</li> </ul> </li> <li> <p>Calculate Effort: Determine the effort required in person-months, which is the work that an individual person needs to do within a month. Evaluate if a task is task-dependent and how it affects the prioritization.</p> </li> <li> <p>Calculate the RICE Score: Use the formula (Reach x Impact x Confidence) / Effort to get the RICE score, then prioritize tasks based on these scores.</p> </li> </ol> <p>Benefits of this prioritization technique:</p> <ul> <li>Relies on measurable criteria rather than gut feelings</li> <li>Promotes informed and objective decisions</li> <li>Provides clear reasoning in the prioritization process</li> </ul> <p>Drawbacks of this prioritization method:</p> <ul> <li>It\u2019s time-consuming</li> <li>The information required to apply this technique is not always available</li> </ul>"},{"location":"en/soft/priority/#tips","title":"Tips","text":"<ul> <li>Prioritization is a continuous process, not a one-time event.  </li> <li>Involve business, development, and users in the decision.  </li> <li>Use tools: Jira priority fields, product roadmaps, Notion, Trello, Linear, etc.  </li> </ul> <p>Key takeaway: prioritization = balancing impact, effort, and urgency to maximize value.  </p>"},{"location":"en/soft/risk/","title":"Risk Management","text":"<p>Risk management is one of the most important parts of project management, product development, security, finance, and even personal planning.</p>"},{"location":"en/soft/risk/#what-is-risk-management","title":"What is Risk Management?","text":"<p>Risk management is a systematic process of:</p> <ol> <li>Identification </li> <li>Analysis </li> <li>Evaluation </li> <li>Planning responses </li> <li>Monitoring </li> </ol> <p>\u2026of all possible threats and uncertainties that could affect the success of a project.</p>"},{"location":"en/soft/risk/#what-is-a-risk","title":"What is a Risk?","text":"<p>A risk is a possible future event \u2014 either negative or positive \u2014 that could influence project objectives.</p>"},{"location":"en/soft/risk/#examples-of-risks","title":"Examples of Risks:","text":"<ul> <li>A key developer leaves the team.  </li> <li>A supplier delays delivery.  </li> <li>Unexpected server overload.  </li> <li>Regulatory change.  </li> <li>Positive risk: sudden product popularity (leading to extra demand).  </li> </ul>"},{"location":"en/soft/risk/#stages-of-risk-management","title":"Stages of Risk Management","text":""},{"location":"en/soft/risk/#1-risk-identification","title":"1. Risk Identification","text":"<p>Goal: list all possible risks.  </p> <p>Methods:</p> <ul> <li>Brainstorming with the team  </li> <li>Reviewing lessons from past projects  </li> <li>Interviews and surveys with stakeholders  </li> </ul> <p>Tools: checklists, SWOT analysis, user story mapping  </p>"},{"location":"en/soft/risk/#2-risk-analysis","title":"2. Risk Analysis","text":"<p>Goal: understand which risks matter most.  </p> <p>Types of Analysis:</p> <ul> <li>Qualitative \u2014 judge how likely and how severe a risk is  </li> <li>Quantitative \u2014 use data when possible (probabilities, financial loss, formulas like impact \u00d7 probability)  </li> </ul> <p>Example Risk Table:</p> Risk Probability Impact Priority DevOps engineer leaves High Medium High AWS outage for 3 days Low High Medium Feature creep (scope growth) Medium Medium Medium"},{"location":"en/soft/risk/#3-risk-response-strategies","title":"3. Risk Response Strategies","text":"<p>Goal: decide what to do with each risk.  </p> Strategy Meaning Example Avoid Eliminate the root cause of the risk Don\u2019t use an unstable new technology Mitigate Reduce the probability or impact Backups, testing, CI/CD pipelines Accept Acknowledge and prepare if it occurs Reserve time and budget in the plan Transfer Shift responsibility to another party Insurance, outsourcing"},{"location":"en/soft/risk/#4-monitoring-and-control","title":"4. Monitoring and Control","text":"<p>Goal: track and update risks continuously.  </p> <p>Activities:</p> <ul> <li>Regular risk reviews (per sprint, monthly)  </li> <li>Re-assessment of risks  </li> <li>Adding new risks as they emerge  </li> </ul> <p>Tools:</p> <ul> <li>Risk register (a dedicated table)  </li> <li>Jira labels, Confluence docs  </li> <li>Trello or other task boards  </li> </ul>"},{"location":"en/soft/risk/#example-of-a-risk-register","title":"Example of a Risk Register","text":"ID Risk Probability Impact Owner Action Plan R1 Team lead resignation Medium High PM Prepare a successor R2 Data loss Low Critical Tech Lead Enable automated backups R3 Design delivery delay High Medium UX Lead Add buffer time to plan"},{"location":"en/soft/risk/#why-is-risk-management-important","title":"Why is Risk Management Important?","text":"<ul> <li>Reduces the number of unexpected issues and crises  </li> <li>Helps justify timelines and budgets  </li> <li>Builds trust with stakeholders  </li> <li>Supports better decision-making  </li> </ul>"},{"location":"en/soft/smart/","title":"S.M.A.R.T","text":"<p>SMART goals are a structured way to set objectives so they are clear, trackable, and realistic. Instead of vague intentions, you create goals that give direction and a plan to measure progress.</p> <p>They are widely used in:</p> <ul> <li>Personal development</li> <li>Business and project management</li> <li>Education</li> <li>Coaching &amp; performance reviews</li> </ul>"},{"location":"en/soft/smart/#breakdown-of-smart","title":"Breakdown of SMART","text":""},{"location":"en/soft/smart/#s-specific","title":"S \u2014 Specific","text":"<p>The goal should be clear and focused. Avoid general statements.</p> <p>Ask: What exactly do I want to achieve? Who is involved? Where will it happen?</p> <p>Example:</p> <ul> <li>Increase sales of product X in the European market.</li> </ul>"},{"location":"en/soft/smart/#m-measurable","title":"M \u2014 Measurable","text":"<p>Progress should be quantifiable. Use metrics, numbers, or milestones.</p> <p>Ask: How will I know when it\u2019s achieved?</p> <p>Example:</p> <ul> <li>Increase sales by 20% compared to last quarter.</li> </ul>"},{"location":"en/soft/smart/#a-achievable-or-attainable","title":"A \u2014 Achievable (or Attainable)","text":"<p>The goal should be realistic and possible, given time, skills, and resources. Stretch goals are okay, but they shouldn\u2019t be impossible.</p> <p>Ask: Can I actually do this? What resources do I need?</p> <p>Example:</p> <ul> <li>Hire 2 new salespeople to cover more regions.</li> </ul>"},{"location":"en/soft/smart/#r-relevant","title":"R \u2014 Relevant","text":"<p>The goal should align with bigger priorities (company strategy, personal vision, etc.).</p> <p>Ask: Why does this goal matter? How does it connect to my long-term plans?</p> <p>Example:</p> <ul> <li>Boosting sales is relevant to increasing company revenue and market presence.</li> </ul>"},{"location":"en/soft/smart/#t-time-bound","title":"T \u2014 Time-bound","text":"<p>Every goal needs a deadline or timeframe.</p> <p>Ask: By when should this be done? What\u2019s the milestone?</p> <p>Example:</p> <ul> <li>Achieve this 20% sales increase within the next 6 months.</li> </ul>"},{"location":"en/soft/smart/#example-of-a-smart-goal","title":"\ud83d\udd39 Example of a SMART Goal","text":"<ul> <li>\u274c Vague goal: \u201cI want to be healthier.\u201d</li> <li>\u2705 SMART goal: \u201cI will exercise at least 4 times a week for 45 minutes and reduce my sugar intake to less than 20g per day, aiming to lose 5kg in 3 months.\u201d</li> </ul>"},{"location":"en/soft/smart/#benefits-of-smart-goals","title":"Benefits of SMART Goals","text":"<ul> <li>Clarity \u2192 You know exactly what success looks like.</li> <li>Motivation \u2192 Measurable progress keeps you engaged.</li> <li>Focus \u2192 Keeps you aligned with bigger objectives.</li> <li>Accountability \u2192 Easier to track and evaluate performance.</li> <li>Efficiency \u2192 Time and resources are better managed.</li> </ul>"},{"location":"en/soft/sdlc/agile/","title":"Agile","text":"<p>Agile is a flexible philosophy and a set of project management principles. It helps teams quickly adapt to changes, focus on delivering a working product, and maintain close collaboration with customers at every stage.</p> <p>Instead of rigid planning and delivering large tasks only at the end, Agile breaks a project into short cycles. This allows teams to gather feedback early, respond faster to new requirements, and release usable results more frequently.</p>"},{"location":"en/soft/sdlc/agile/#key-ideas-of-agile","title":"Key Ideas of Agile","text":"<ul> <li>Flexibility \u2014 quick response to changing requirements, market conditions, or unexpected issues.  </li> <li>Constant collaboration \u2014 close teamwork and open dialogue with the customer.  </li> <li>Working product \u2014 focus on delivering a working product at early stages instead of spending too much time on documentation and planning.  </li> <li>Self-organization \u2014 the team makes decisions and manages the workflow independently, which increases efficiency.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#how-it-works","title":"How It Works","text":"<ul> <li>Iterative Development: Projects are divided into small cycles or \"sprints,\" where specific features are developed and tested.  </li> <li>Cross-Functional, Self-Organizing Teams: Teams are empowered and collaborative, completing tasks and making decisions together.  </li> <li>Frequent Feedback: Regular input from stakeholders and customers ensures the product meets evolving needs.  </li> <li>Continuous Improvement: Teams reflect after each sprint to improve processes and adapt strategies.  </li> <li>Flexibility and Adaptability: Agile embraces change, allowing teams to adjust priorities and respond to feedback without disrupting the project.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#popular-agile-frameworks","title":"Popular Agile Frameworks","text":"<ul> <li>Scrum: Uses fixed-length sprints and defined roles (Product Owner, Scrum Master) to manage complex development.  </li> <li>Kanban: Focuses on visualizing workflow and limiting work in progress to improve efficiency.  </li> <li>Extreme Programming (XP): Emphasizes technical practices and sustainable development pace.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#benefits-of-agile-methodology","title":"Benefits of Agile Methodology","text":"<ul> <li>Faster Delivery: Quicker releases keep customers engaged.  </li> <li>Enhanced Quality: Customer feedback leads to higher-quality products.  </li> <li>Increased Flexibility: Teams can adapt to changes during development.  </li> <li>Improved Customer Satisfaction: Continuous collaboration ensures the final product meets customer needs.  </li> </ul>"},{"location":"en/soft/sdlc/kanban/","title":"Kanban","text":"<p>The Kanban method is a visual, lean, and agile workflow management approach that helps teams visualize tasks, limit work in progress (WIP), and optimize the continuous flow of work from inception to delivery.  </p> <p>Originating from Toyota's manufacturing system, Kanban now commonly uses a Kanban board to represent workflow stages and tasks as cards that move across the board. Its principles emphasize evolutionary, incremental change, starting with what already exists and encouraging teams to continuously improve their processes to enhance efficiency, transparency, and customer satisfaction.</p>"},{"location":"en/soft/sdlc/kanban/#key-principles-of-the-kanban-method","title":"Key Principles of the Kanban Method","text":"<ul> <li>Start with the existing process \u2014 Kanban is evolutionary and begins by visualizing the current workflow.  </li> <li>Make incremental and evolutionary changes \u2014 focuses on small, continuous improvements rather than large overhauls.  </li> <li>Encourage collaboration and leadership \u2014 team members share responsibility and leadership in solving problems.  </li> <li>Maintain the existing team structure \u2014 Kanban adapts to current roles and processes, easing integration.  </li> </ul>"},{"location":"en/soft/sdlc/kanban/#how-the-kanban-method-works","title":"How the Kanban Method Works","text":"<ol> <li>Visualize the workflow \u2014 tasks are shown as cards on a Kanban board, moving across columns that represent workflow stages.  </li> <li>Limit work in progress (WIP) \u2014 placing constraints on the number of tasks per stage to reduce bottlenecks and improve focus.  </li> <li>Manage the flow \u2014 tasks are pulled by the team as capacity allows, ensuring a continuous and steady flow.  </li> <li>Make process policies explicit \u2014 defining clear agreements on how work flows to ensure transparency and shared understanding.  </li> <li>Implement feedback loops \u2014 regular meetings and discussions help evaluate progress, identify issues, and propose improvements.  </li> <li>Improve collaboratively and evolve experimentally \u2014 teams experiment with changes and continuously refine their process.  </li> </ol>"},{"location":"en/soft/sdlc/scrum/","title":"Scrum","text":"<p>Scrum is an Agile project management framework that helps teams deliver value through short, iterative cycles called sprints. It defines a set of roles, events, and artifacts to break down complex projects into manageable pieces.  </p> <p>The framework is guided by the principles of transparency, inspection, and adaptation, enabling teams to self-organize, respond to change, and continuously improve while delivering high-quality results.</p>"},{"location":"en/soft/sdlc/scrum/#core-components-of-the-scrum-framework","title":"Core Components of the Scrum Framework","text":""},{"location":"en/soft/sdlc/scrum/#roles","title":"Roles","text":"<ul> <li>Product Owner \u2014 represents stakeholders and owns the product backlog, prioritizing features to maximize value.  </li> <li>Scrum Master \u2014 a servant-leader who facilitates the team, removes impediments, and coaches the team in Scrum practices.  </li> <li>Developers \u2014 the cross-functional team that builds the product increment during each sprint.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#events","title":"Events","text":"<ul> <li>Sprint \u2014 a time-boxed period (typically 1\u20134 weeks) during which a usable product increment is created.  </li> <li>Sprint Planning \u2014 defines the work to be done in the upcoming sprint and creates a sprint backlog.  </li> <li>Daily Scrum \u2014 a 15-minute meeting for the development team to synchronize activities and plan for the next 24 hours.  </li> <li>Sprint Review \u2014 inspects the work completed during the sprint and adapts the product backlog if needed.  </li> <li>Sprint Retrospective \u2014 reflects on the sprint\u2019s process and identifies improvements for the next one.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#artifacts","title":"Artifacts","text":"<ul> <li>Product Backlog \u2014 a dynamic list of all desired work for the product.  </li> <li>Sprint Backlog \u2014 a set of product backlog items chosen for a sprint, plus a plan for delivering them.  </li> <li>Product Increment \u2014 the sum of all completed backlog items across sprints, which should be potentially releasable.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#key-principles-empiricism","title":"Key Principles (Empiricism)","text":"<p>Scrum is built on the pillars of empiricism:  </p> <ul> <li>Transparency \u2014 key aspects of the process must be visible to all participants.  </li> <li>Inspection \u2014 teams frequently inspect the work and progress to detect variances.  </li> <li>Adaptation \u2014 if inspection reveals issues, the team adjusts its course accordingly.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#how-it-works","title":"How It Works","text":"<ol> <li>The Product Owner orders the work into the Product Backlog.  </li> <li>During Sprint Planning, the team selects items for the Sprint Backlog.  </li> <li>The team develops these items during the Sprint.  </li> <li>Daily Scrums help keep the team aligned.  </li> <li>At the end of the Sprint, the team demonstrates the new Increment in a Sprint Review.  </li> <li>Finally, the team reflects and improves during the Sprint Retrospective.  </li> </ol>"},{"location":"en/soft/sdlc/sdlc/","title":"Meaning","text":"<p>SDLC (Software Development Life Cycle) is a step-by-step process for creating software product. It includes planning, design, development, testing, and maintenance. Each stage has its own goals to make sure the software works well, meets user needs, and supports business goals. Using SDLC helps teams work more efficiently, reduce risks, and keep the quality of the software high.</p>"},{"location":"en/soft/sdlc/sdlc/#phases","title":"Phases","text":"Phase Description Planning Define the purpose of the software, gather initial requirements, and plan resources, timeline, and budget. Requirements Collect and document what the users and business need from the software. Design Create the architecture, system design, techologies to use and user interface based on requirements. Development Write the actual code and build the software. Testing Check for bugs, verify functionality, and ensure the software meets requirements. Deployment Release the software. Maintenance Provide updates, fix issues, and improve the system over time."},{"location":"en/soft/sdlc/sdlc/#alternative-approaches","title":"Alternative approaches","text":"Model Features Waterfall Sequential steps, strict order. Agile Incremental, iterative, flexible. Scrum Agile with defined roles, sprints, and boards. DevOps Continuous integration, automation, CI/CD. V-Model Each development stage has a corresponding test."},{"location":"en/soft/sdlc/sdlc/#why-use-sdlc","title":"Why use SDLC?","text":"<ul> <li>To understand the structure of the development process.  </li> <li>To estimate time and resources.  </li> <li>To avoid chaos and improve planning.  </li> <li>To communicate with managers, QA, and analysts in a common language.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/","title":"Waterfall","text":"<p>Waterfall is a traditional project management methodology based on a linear and sequential approach. In this model, the project is divided into distinct phases, and each phase must be completed before the next one begins. Once a stage is finished, it is not revisited, which makes changes difficult and costly.</p> <p>This methodology is often used in projects with clear, fixed requirements where the scope and outcomes are well-defined from the beginning.</p>"},{"location":"en/soft/sdlc/waterfall/#key-characteristics-of-waterfall","title":"Key Characteristics of Waterfall","text":"<ul> <li>Sequential process \u2014 the project flows step by step, with no overlap between phases.  </li> <li>Strict documentation \u2014 every stage produces detailed documentation before moving forward.  </li> <li>Limited flexibility \u2014 changes are hard to introduce once the project has started.  </li> <li>Clear milestones \u2014 each phase must be fully completed before moving to the next.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/#typical-phases-of-waterfall","title":"Typical Phases of Waterfall","text":"<ol> <li>Requirements \u2014 gathering and documenting all project needs and goals.  </li> <li>Design \u2014 creating the system architecture and detailed specifications.  </li> <li>Implementation \u2014 developing the product according to the design.  </li> <li>Verification (Testing) \u2014 checking the product against requirements to ensure correctness.  </li> <li>Maintenance \u2014 supporting, fixing, and updating the product after release.  </li> </ol>"},{"location":"en/soft/sdlc/waterfall/#approaches-based-on-waterfall","title":"Approaches Based on Waterfall","text":"<p>Several variations of the classic Waterfall model have been developed to address some of its limitations:</p> <ul> <li>V-Model (Verification and Validation Model) \u2014 emphasizes testing at each stage of development, with a direct relationship between development and testing phases.  </li> <li>Incremental Waterfall \u2014 divides the project into smaller parts; each part goes through all Waterfall phases, delivering incremental functionality.  </li> <li>Sashimi Model \u2014 allows phases to overlap slightly, unlike the strict step-by-step flow of traditional Waterfall.  </li> <li>Spiral Model \u2014 combines iterative development with the structured steps of Waterfall, focusing on risk analysis at every cycle.  </li> <li>Iterative Waterfall \u2014 allows limited feedback loops between stages, so some phases can be revisited before final delivery.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/#when-to-use-waterfall","title":"When to Use Waterfall","text":"<ul> <li>Projects with well-defined and stable requirements.  </li> <li>Situations where documentation and compliance are crucial (e.g., government or regulated industries).  </li> <li>Projects with minimal expected changes during development.  </li> </ul>"}]}