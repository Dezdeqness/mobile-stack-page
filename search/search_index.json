{"config":{"lang":["ru","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c","text":"KotlinJava <pre><code>fun hello() = println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Kotlin!\")\n</code></pre> <pre><code>public class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Java!\");\n    }\n}\n</code></pre>"},{"location":"en/","title":"You are welcome","text":"KotlinJava <pre><code>fun hello() = println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Kotlin!\")\n</code></pre> <pre><code>public class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"\u041f\u0440\u0438\u0432\u0435\u0442 \u0438\u0437 Java!\");\n    }\n}\n</code></pre>"},{"location":"en/about/","title":"About","text":""},{"location":"en/hard/","title":"Hard","text":""},{"location":"en/soft/","title":"Soft","text":""},{"location":"en/soft/conflict/","title":"Conflict management","text":""},{"location":"en/soft/delegation/","title":"Delegation","text":""},{"location":"en/soft/estimations/","title":"Estimation techniques","text":""},{"location":"en/soft/priority/","title":"Priority","text":""},{"location":"en/soft/risk/","title":"Risk management","text":""},{"location":"en/soft/sdlc/agile/","title":"Agile","text":"<p>Agile is a flexible philosophy and a set of project management principles. It helps teams quickly adapt to changes, focus on delivering a working product, and maintain close collaboration with customers at every stage.</p> <p>Instead of rigid planning and delivering large tasks only at the end, Agile breaks a project into short cycles. This allows teams to gather feedback early, respond faster to new requirements, and release usable results more frequently.</p>"},{"location":"en/soft/sdlc/agile/#key-ideas-of-agile","title":"Key Ideas of Agile","text":"<ul> <li>Flexibility \u2014 quick response to changing requirements, market conditions, or unexpected issues.  </li> <li>Constant collaboration \u2014 close teamwork and open dialogue with the customer.  </li> <li>Working product \u2014 focus on delivering a working product at early stages instead of spending too much time on documentation and planning.  </li> <li>Self-organization \u2014 the team makes decisions and manages the workflow independently, which increases efficiency.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#how-it-works","title":"How It Works","text":"<ul> <li>Iterative Development: Projects are divided into small cycles or \"sprints,\" where specific features are developed and tested.  </li> <li>Cross-Functional, Self-Organizing Teams: Teams are empowered and collaborative, completing tasks and making decisions together.  </li> <li>Frequent Feedback: Regular input from stakeholders and customers ensures the product meets evolving needs.  </li> <li>Continuous Improvement: Teams reflect after each sprint to improve processes and adapt strategies.  </li> <li>Flexibility and Adaptability: Agile embraces change, allowing teams to adjust priorities and respond to feedback without disrupting the project.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#popular-agile-frameworks","title":"Popular Agile Frameworks","text":"<ul> <li>Scrum: Uses fixed-length sprints and defined roles (Product Owner, Scrum Master) to manage complex development.  </li> <li>Kanban: Focuses on visualizing workflow and limiting work in progress to improve efficiency.  </li> <li>Extreme Programming (XP): Emphasizes technical practices and sustainable development pace.  </li> </ul>"},{"location":"en/soft/sdlc/agile/#benefits-of-agile-methodology","title":"Benefits of Agile Methodology","text":"<ul> <li>Faster Delivery: Quicker releases keep customers engaged.  </li> <li>Enhanced Quality: Customer feedback leads to higher-quality products.  </li> <li>Increased Flexibility: Teams can adapt to changes during development.  </li> <li>Improved Customer Satisfaction: Continuous collaboration ensures the final product meets customer needs.  </li> </ul>"},{"location":"en/soft/sdlc/kanban/","title":"Kanban","text":"<p>The Kanban method is a visual, lean, and agile workflow management approach that helps teams visualize tasks, limit work in progress (WIP), and optimize the continuous flow of work from inception to delivery.  </p> <p>Originating from Toyota's manufacturing system, Kanban now commonly uses a Kanban board to represent workflow stages and tasks as cards that move across the board. Its principles emphasize evolutionary, incremental change, starting with what already exists and encouraging teams to continuously improve their processes to enhance efficiency, transparency, and customer satisfaction.</p>"},{"location":"en/soft/sdlc/kanban/#key-principles-of-the-kanban-method","title":"Key Principles of the Kanban Method","text":"<ul> <li>Start with the existing process \u2014 Kanban is evolutionary and begins by visualizing the current workflow.  </li> <li>Make incremental and evolutionary changes \u2014 focuses on small, continuous improvements rather than large overhauls.  </li> <li>Encourage collaboration and leadership \u2014 team members share responsibility and leadership in solving problems.  </li> <li>Maintain the existing team structure \u2014 Kanban adapts to current roles and processes, easing integration.  </li> </ul>"},{"location":"en/soft/sdlc/kanban/#how-the-kanban-method-works","title":"How the Kanban Method Works","text":"<ol> <li>Visualize the workflow \u2014 tasks are shown as cards on a Kanban board, moving across columns that represent workflow stages.  </li> <li>Limit work in progress (WIP) \u2014 placing constraints on the number of tasks per stage to reduce bottlenecks and improve focus.  </li> <li>Manage the flow \u2014 tasks are pulled by the team as capacity allows, ensuring a continuous and steady flow.  </li> <li>Make process policies explicit \u2014 defining clear agreements on how work flows to ensure transparency and shared understanding.  </li> <li>Implement feedback loops \u2014 regular meetings and discussions help evaluate progress, identify issues, and propose improvements.  </li> <li>Improve collaboratively and evolve experimentally \u2014 teams experiment with changes and continuously refine their process.  </li> </ol>"},{"location":"en/soft/sdlc/scrum/","title":"Scrum","text":"<p>Scrum is an Agile project management framework that helps teams deliver value through short, iterative cycles called sprints. It defines a set of roles, events, and artifacts to break down complex projects into manageable pieces.  </p> <p>The framework is guided by the principles of transparency, inspection, and adaptation, enabling teams to self-organize, respond to change, and continuously improve while delivering high-quality results.</p>"},{"location":"en/soft/sdlc/scrum/#core-components-of-the-scrum-framework","title":"Core Components of the Scrum Framework","text":""},{"location":"en/soft/sdlc/scrum/#roles","title":"Roles","text":"<ul> <li>Product Owner \u2014 represents stakeholders and owns the product backlog, prioritizing features to maximize value.  </li> <li>Scrum Master \u2014 a servant-leader who facilitates the team, removes impediments, and coaches the team in Scrum practices.  </li> <li>Developers \u2014 the cross-functional team that builds the product increment during each sprint.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#events","title":"Events","text":"<ul> <li>Sprint \u2014 a time-boxed period (typically 1\u20134 weeks) during which a usable product increment is created.  </li> <li>Sprint Planning \u2014 defines the work to be done in the upcoming sprint and creates a sprint backlog.  </li> <li>Daily Scrum \u2014 a 15-minute meeting for the development team to synchronize activities and plan for the next 24 hours.  </li> <li>Sprint Review \u2014 inspects the work completed during the sprint and adapts the product backlog if needed.  </li> <li>Sprint Retrospective \u2014 reflects on the sprint\u2019s process and identifies improvements for the next one.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#artifacts","title":"Artifacts","text":"<ul> <li>Product Backlog \u2014 a dynamic list of all desired work for the product.  </li> <li>Sprint Backlog \u2014 a set of product backlog items chosen for a sprint, plus a plan for delivering them.  </li> <li>Product Increment \u2014 the sum of all completed backlog items across sprints, which should be potentially releasable.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#key-principles-empiricism","title":"Key Principles (Empiricism)","text":"<p>Scrum is built on the pillars of empiricism:  </p> <ul> <li>Transparency \u2014 key aspects of the process must be visible to all participants.  </li> <li>Inspection \u2014 teams frequently inspect the work and progress to detect variances.  </li> <li>Adaptation \u2014 if inspection reveals issues, the team adjusts its course accordingly.  </li> </ul>"},{"location":"en/soft/sdlc/scrum/#how-it-works","title":"How It Works","text":"<ol> <li>The Product Owner orders the work into the Product Backlog.  </li> <li>During Sprint Planning, the team selects items for the Sprint Backlog.  </li> <li>The team develops these items during the Sprint.  </li> <li>Daily Scrums help keep the team aligned.  </li> <li>At the end of the Sprint, the team demonstrates the new Increment in a Sprint Review.  </li> <li>Finally, the team reflects and improves during the Sprint Retrospective.  </li> </ol>"},{"location":"en/soft/sdlc/sdlc/","title":"Meaning","text":"<p>SDLC (Software Development Life Cycle) is a step-by-step process for creating software product. It includes planning, design, development, testing, and maintenance. Each stage has its own goals to make sure the software works well, meets user needs, and supports business goals. Using SDLC helps teams work more efficiently, reduce risks, and keep the quality of the software high.</p>"},{"location":"en/soft/sdlc/sdlc/#phases","title":"Phases","text":"Phase Description Planning Define the purpose of the software, gather initial requirements, and plan resources, timeline, and budget. Requirements Collect and document what the users and business need from the software. Design Create the architecture, system design, techologies to use and user interface based on requirements. Development Write the actual code and build the software. Testing Check for bugs, verify functionality, and ensure the software meets requirements. Deployment Release the software. Maintenance Provide updates, fix issues, and improve the system over time."},{"location":"en/soft/sdlc/sdlc/#alternative-approaches","title":"Alternative approaches","text":"Model Features Waterfall Sequential steps, strict order. Agile Incremental, iterative, flexible. Scrum Agile with defined roles, sprints, and boards. DevOps Continuous integration, automation, CI/CD. V-Model Each development stage has a corresponding test."},{"location":"en/soft/sdlc/sdlc/#why-use-sdlc","title":"Why use SDLC?","text":"<ul> <li>To understand the structure of the development process.  </li> <li>To estimate time and resources.  </li> <li>To avoid chaos and improve planning.  </li> <li>To communicate with managers, QA, and analysts in a common language.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/","title":"Waterfall","text":"<p>Waterfall is a traditional project management methodology based on a linear and sequential approach. In this model, the project is divided into distinct phases, and each phase must be completed before the next one begins. Once a stage is finished, it is not revisited, which makes changes difficult and costly.</p> <p>This methodology is often used in projects with clear, fixed requirements where the scope and outcomes are well-defined from the beginning.</p>"},{"location":"en/soft/sdlc/waterfall/#key-characteristics-of-waterfall","title":"Key Characteristics of Waterfall","text":"<ul> <li>Sequential process \u2014 the project flows step by step, with no overlap between phases.  </li> <li>Strict documentation \u2014 every stage produces detailed documentation before moving forward.  </li> <li>Limited flexibility \u2014 changes are hard to introduce once the project has started.  </li> <li>Clear milestones \u2014 each phase must be fully completed before moving to the next.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/#typical-phases-of-waterfall","title":"Typical Phases of Waterfall","text":"<ol> <li>Requirements \u2014 gathering and documenting all project needs and goals.  </li> <li>Design \u2014 creating the system architecture and detailed specifications.  </li> <li>Implementation \u2014 developing the product according to the design.  </li> <li>Verification (Testing) \u2014 checking the product against requirements to ensure correctness.  </li> <li>Maintenance \u2014 supporting, fixing, and updating the product after release.  </li> </ol>"},{"location":"en/soft/sdlc/waterfall/#approaches-based-on-waterfall","title":"Approaches Based on Waterfall","text":"<p>Several variations of the classic Waterfall model have been developed to address some of its limitations:</p> <ul> <li>V-Model (Verification and Validation Model) \u2014 emphasizes testing at each stage of development, with a direct relationship between development and testing phases.  </li> <li>Incremental Waterfall \u2014 divides the project into smaller parts; each part goes through all Waterfall phases, delivering incremental functionality.  </li> <li>Sashimi Model \u2014 allows phases to overlap slightly, unlike the strict step-by-step flow of traditional Waterfall.  </li> <li>Spiral Model \u2014 combines iterative development with the structured steps of Waterfall, focusing on risk analysis at every cycle.  </li> <li>Iterative Waterfall \u2014 allows limited feedback loops between stages, so some phases can be revisited before final delivery.  </li> </ul>"},{"location":"en/soft/sdlc/waterfall/#when-to-use-waterfall","title":"When to Use Waterfall","text":"<ul> <li>Projects with well-defined and stable requirements.  </li> <li>Situations where documentation and compliance are crucial (e.g., government or regulated industries).  </li> <li>Projects with minimal expected changes during development.  </li> </ul>"}]}